import validateIPAddress from '../../validateIPAddress'

const invalidError = {error: 'Please enter a valid IP address'}

describe('validateIPAddress', () => {
  it('accepts valid IPv4 addresses', () => {
    expect(validateIPAddress('0.0.0.0')).toBe(undefined)
    expect(validateIPAddress('192.168.0.1')).toBe(undefined)
    expect(validateIPAddress('255.255.255.255')).toBe(undefined)
    expect(validateIPAddress('  \n192.168.0.1 \t')).toBe(undefined)
    expect(validateIPAddress('255.255.255.255')).toBe(undefined)
  })
  it('accepts valid IPv6 addresses', () => {
    expect(validateIPAddress('00:00:00:00:00:00:00:00')).toBe(undefined)
    expect(validateIPAddress('ab:cd:ef:01:23:45:67:89')).toBe(undefined)
    expect(validateIPAddress('AB:CD:EF:01:23:45:67:89')).toBe(undefined)
  })
  it('rejects invalid IPv4 addresses', () => {
    expect(validateIPAddress('0')).toEqual(invalidError)
    expect(validateIPAddress('0.')).toEqual(invalidError)
    expect(validateIPAddress('0.0')).toEqual(invalidError)
    expect(validateIPAddress('0.0.')).toEqual(invalidError)
    expect(validateIPAddress('0.0.0')).toEqual(invalidError)
    expect(validateIPAddress('0.0.0.')).toEqual(invalidError)
    expect(validateIPAddress('0.0.0.0.')).toEqual(invalidError)
    expect(validateIPAddress('.0.0.0.0')).toEqual(invalidError)
    expect(validateIPAddress('0.0.0.0.0')).toEqual(invalidError)
    expect(validateIPAddress('0.0.0.256')).toEqual(invalidError)
    expect(validateIPAddress('0.0.256.0')).toEqual(invalidError)
    expect(validateIPAddress('0.256.0.0')).toEqual(invalidError)
    expect(validateIPAddress('256.0.0.0')).toEqual(invalidError)
    expect(validateIPAddress('999.0.0.0')).toEqual(invalidError)
    expect(validateIPAddress('192.16a.0.1')).toEqual(invalidError)
    expect(validateIPAddress('192.168..0.1')).toEqual(invalidError)
    expect(validateIPAddress('192.0168.0.1')).toEqual(invalidError)
    expect(validateIPAddress('192.168.a.1')).toEqual(invalidError)
    expect(validateIPAddress('192.168.0.a')).toEqual(invalidError)
    expect(validateIPAddress('192.168.0.a')).toEqual(invalidError)
    expect(validateIPAddress('a192.168.0.a')).toEqual(invalidError)
  })
  it('rejects invalid IPv6 addresses', () => {
    expect(validateIPAddress(':00:00:00:00:00:00:00:00')).toEqual(invalidError)
    expect(validateIPAddress('00:00:00:00:00:00:00:0')).toEqual(invalidError)
    expect(validateIPAddress('00:00:00:00:00:00:00:')).toEqual(invalidError)
    expect(validateIPAddress('00:00:00:00:00:00:00')).toEqual(invalidError)
    expect(validateIPAddress('00:00:00:00:00:00:0')).toEqual(invalidError)
    expect(validateIPAddress('00:00:00:00:00:00:')).toEqual(invalidError)
    expect(validateIPAddress('g0:00:00:00:00:00:00:00')).toEqual(invalidError)
    expect(validateIPAddress('G0:00:00:00:00:00:00:00')).toEqual(invalidError)
    expect(validateIPAddress('00:g0:00:00:00:00:00:00')).toEqual(invalidError)
    expect(validateIPAddress('00:00:00:00:00:00:00:g0')).toEqual(invalidError)
    expect(validateIPAddress('00::00:00:00:00:00:00:g0')).toEqual(invalidError)
  })
})
